"set nocompatible
if has('nvim')
  let s:editor_root=expand("~/.config/nvim")
else
  let s:editor_root=expand("~/.vim")
endif

set termguicolors
set t_8f=[38;2;%lu;%lu;%lum
set t_8b=[48;2;%lu;%lu;%lum
"let &t_8f = "\<Esc>[38:2:%lu:%lu:%lum"
"let &t_8b = "\<Esc>[48:2:%lu:%lu:%lum"

set hidden
set number
set relativenumber
set ruler

set encoding=utf-8

set nowrap
set tabstop=2
set shiftwidth=2
set softtabstop=2
set expandtab
set smarttab
set list listchars=tab:\ \ ,trail:Â·

set hlsearch
set incsearch
set ignorecase
set smartcase

"Rust stuff
let g:rustfmt_autosave = 1
let g:neomake_echo_current_error=1
autocmd! BufWritePost * Neomake


filetype off

set guifont=Inconsolata:h16

set backupdir=~/.vim/backup
set directory=~/.vim/backup

runtime! macros/matchit.vim

set showcmd

" Commands
set pastetoggle=<F10>
cmap <C-P> <C-R>=expand("%:p:h") . "/" <CR>

tnoremap <Esc> <C-\><C-n>

let mapleader = "\<Space>"
nnoremap <Leader>e :e <C-R>=expand("%:p:h") . "/" <CR>
nnoremap <Leader>w :w<CR>
nnoremap <Leader>b :b
nnoremap <Leader>bd :bd<CR>
nnoremap <Leader>bn :bn<CR>
nnoremap <Leader>bp :bp<CR>
nnoremap <Leader>q :q<CR>
nnoremap <Leader>v :vs<CR>
nmap <Leader><Leader> V

" elixir test runner commands
" let g:extest_exunit_run_test_cmd = "elixir '%f'"
" let g:extest_exunit_run_file_cmd = "elixir '%f'"
" map <leader>T :ExTestRunFile<CR>
" map <leader>t :ExTestRunTest<CR>
" map <leader>lt :ExTestRunLast<CR>

" vim-go maps
au FileType go nmap <leader>r <Plug>(go-run)
au FileType go nmap <leader>m <Plug>(go-build)
au FileType go nmap <leader>t <Plug>(go-test)
au FileType go nmap <leader>c <Plug>(go-coverage)
au FileType go nmap <Leader>gd <Plug>(go-doc)
au FileType go nmap <Leader>gv <Plug>(go-doc-vertical)
au FileType go nmap <Leader>s <Plug>(go-implements)
au FileType go nmap <Leader>i <Plug>(go-info)

let g:go_highlight_functions = 1
let g:go_highlight_methods = 1
let g:go_highlight_structs = 1
let g:go_highlight_operators = 1
let g:go_highlight_build_constraints = 1
let g:go_fmt_command = "goimports"
let g:syntastic_go_checkers = ['golint', 'govet', 'errcheck']
let g:syntastic_mode_map = { 'mode': 'active', 'passive_filetypes': ['go'] }
let g:go_list_type = "quickfix"

if has('nvim')
  let g:deoplete#enable_at_startup = 1
  inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
  inoremap <expr><C-l>     deoplete#complete_common_string()
else
  let g:neocomplete#enable_at_startup = 1
  inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
  inoremap <expr><C-l>     neocomplete#complete_common_string()
endif


"YouCompleteMe settings:
"autoclose scratch window after completion
let g:ycm_path_to_python_interpreter = '/home/jrankin/.pyenv/shims/python'
let g:ycm_autoclose_preview_window_after_completion = 1
let g:ycm_autoclose_preview_window_after_insertion = 1


autocmd BufNewFile,BufRead Vagrantfile set filetype=ruby



" Treate eco files as html for autoclose
au Filetype eco so ~/.vim/bundle/HTML-AutoCloseTag/ftplugin/html_autoclosetag.vim

" Haskell stuff from: http://www.stephendiehl.com/posts/vim_2016.html
map <silent> tw :GhcModTypeInsert<CR>
map <silent> ts :GhcModSplitFunCase<CR>
map <silent> tq :GhcModType<CR>
map <silent> te :GhcModTypeClear<CR>


"python with virtualenv support
"py << EOF
"import os
"import sys
"if 'VIRTUAL_ENV' in os.environ:
"  project_base_dir = os.environ['VIRTUAL_ENV']
"  activate_this = os.path.join(project_base_dir, 'bin/activate_this.py')
"  execfile(activate_this, dict(__file__=activate_this))
"EOF

let python_highlight_all=1

" Vim-plug
call plug#begin(s:editor_root . '/bundle')

Plug 'gmarik/Vundle.vim'

Plug 'tpope/vim-unimpaired'
Plug 'tpope/vim-endwise'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-rails'

Plug 'vim-scripts/matchit.zip'
Plug 'scrooloose/syntastic'
" Plug "MarcWeber/vim-addon-mw-utils"
" Plug "tomtom/tlib_vim"
" Plug "garbas/vim-snipmate"

Plug 'kchmck/vim-coffee-script'
Plug 'AndrewRadev/vim-eco'
Plug 'vim-scripts/HTML-AutoCloseTag'
Plug 'fatih/vim-go'

" Plug 'ekalinin/Dockerfile.vim'
" Plug 'matthewsimo/angular-vim-snippets'

Plug 'wting/rust.vim'
Plug 'racer-rust/vim-racer'

Plug 'neovimhaskell/haskell-vim'
Plug 'alx741/vim-hindent'
Plug 'eagletmt/ghcmod-vim'
" Plug 'elixir-lang/vim-elixir'
" Plug 'BjRo/vim-extest'
" Plug 'Valloric/YouCompleteMe'
Plug 'Shougo/vimproc.vim'
"Plug 'dart-lang/dart-vim-plugin'
Plug 'leafgarland/typescript-vim'


if has('nvim')
  Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
else
  Plug 'Shougo/neocomplete.vim'
endif
" Python
"Plug 'vim-scripts/indentpython.vim'
Plug 'nvie/vim-flake8'

" Optional:
" Plug 'honza/vim-snippets'
" Ember Stuff
" Plug 'mustache/vim-mustache-handlebars'
"
Plug 'mhartington/oceanic-next'
Plug 'morhetz/gruvbox'
Plug 'neomake/neomake'

Plug 'elmcast/elm-vim'

call plug#end()

syntax enable
filetype plugin indent on

set background=dark
colorscheme gruvbox

" Don't autoinstall go plugins every startup
let g:go_disable_autoinstall = 1
" Set jscs as linter for js files
let g:syntastic_javascript_checkers=['eslint']
